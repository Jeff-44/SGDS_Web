// <auto-generated />
using System;
using Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(SGDSDbContext))]
    [Migration("20250801122245_AddDateDernierDonAndProchaineDateEligible")]
    partial class AddDateDernierDonAndProchaineDateEligible
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApplicationCore.Entities.Collectes.Collecte", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CentreId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreeLe")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreePar")
                        .HasColumnType("text");

                    b.Property<DateOnly>("DateCollecte")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifieLe")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiePar")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CentreId");

                    b.ToTable("Collectes");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Collectes.Don", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CollecteId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreeLe")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreePar")
                        .HasColumnType("text");

                    b.Property<long>("DonneurId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifieLe")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiePar")
                        .HasColumnType("text");

                    b.Property<bool>("TestePositifPourMaladie")
                        .HasColumnType("boolean");

                    b.Property<int>("Volume")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CollecteId");

                    b.HasIndex("DonneurId");

                    b.ToTable("Dons");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Collectes.Donneur", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Adresse")
                        .HasColumnType("text");

                    b.Property<string>("CIN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreeLe")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreePar")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("DateDernierDon")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DateNaissance")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EstActif")
                        .HasColumnType("boolean");

                    b.Property<bool>("EstEligible")
                        .HasColumnType("boolean");

                    b.Property<bool?>("EstRegulier")
                        .HasColumnType("boolean");

                    b.Property<string>("GroupeSanguin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifieLe")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiePar")
                        .HasColumnType("text");

                    b.Property<string>("NIF")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Occupation")
                        .HasColumnType("text");

                    b.Property<long?>("PersonneDeContactId")
                        .HasColumnType("bigint");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly?>("ProchaineDateEligible")
                        .HasColumnType("date");

                    b.Property<string>("Raison")
                        .HasColumnType("text");

                    b.Property<string>("Sexe")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StatutMatrimonial")
                        .HasColumnType("text");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PersonneDeContactId");

                    b.ToTable("Donneurs");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Collectes.Dossier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreeLe")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreePar")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("DateInfectionRecente")
                        .HasColumnType("date");

                    b.Property<string>("DetailsMaladieChronique")
                        .HasColumnType("text");

                    b.Property<long>("DonneurId")
                        .HasColumnType("bigint");

                    b.Property<bool>("EstAnemie")
                        .HasColumnType("boolean");

                    b.Property<bool>("EstEnceinte")
                        .HasColumnType("boolean");

                    b.Property<bool>("InfectionRecente")
                        .HasColumnType("boolean");

                    b.Property<bool>("MaladieChronique")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifieLe")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiePar")
                        .HasColumnType("text");

                    b.Property<float>("Poids")
                        .HasColumnType("real");

                    b.Property<string>("PriseDeMedicamentsActuel")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DonneurId")
                        .IsUnique();

                    b.ToTable("Dossiers");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Location.Centre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreeLe")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreePar")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifieLe")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiePar")
                        .HasColumnType("text");

                    b.Property<string>("NomCentre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TypeCentre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("VilleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Centres");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PersonneDeContact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Adresse")
                        .HasColumnType("text");

                    b.Property<string>("CIN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreeLe")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreePar")
                        .HasColumnType("text");

                    b.Property<DateOnly>("DateNaissance")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifieLe")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiePar")
                        .HasColumnType("text");

                    b.Property<string>("NIF")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Occupation")
                        .HasColumnType("text");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Sexe")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StatutMatrimonial")
                        .HasColumnType("text");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PersonneDeContact");
                });

            modelBuilder.Entity("Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ApplicationCore.Entities.Collectes.Collecte", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Location.Centre", "Centre")
                        .WithMany()
                        .HasForeignKey("CentreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Centre");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Collectes.Don", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Collectes.Collecte", "Collecte")
                        .WithMany()
                        .HasForeignKey("CollecteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Collectes.Donneur", "Donneur")
                        .WithMany()
                        .HasForeignKey("DonneurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collecte");

                    b.Navigation("Donneur");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Collectes.Donneur", b =>
                {
                    b.HasOne("ApplicationCore.Entities.PersonneDeContact", "PersonneDeContact")
                        .WithMany()
                        .HasForeignKey("PersonneDeContactId");

                    b.Navigation("PersonneDeContact");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Collectes.Dossier", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Collectes.Donneur", "Donneur")
                        .WithOne("Dossier")
                        .HasForeignKey("ApplicationCore.Entities.Collectes.Dossier", "DonneurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donneur");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.Entities.Collectes.Donneur", b =>
                {
                    b.Navigation("Dossier");
                });
#pragma warning restore 612, 618
        }
    }
}
